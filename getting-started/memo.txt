
1.webpack 소개 영상
https://www.youtube.com/watch?v=WQue1AN93YU
 참고하기
위 영상 요약
🌐 웹팩은 현대 프런트엔드 개발에서 복잡성 증가의 주요 원인 중 하나이지만, 개념적으로는 간단한 도구입니다.
🧩 웹팩은 파일 종속성을 처리하고 브라우저에 최적화 번들을 생성하는 것을 목표로 하는 브라우저의 미리 컴파일러로 생각할 수 있습니다.
⚙️ 웹팩은 JavaScript 뿐만 아니라 모든 종류의 파일을 처리하며, 브라우저 렌더링에 유용한 최적화를 제공합니다.
🌍 웹팩은 네트워크 성능 개선을 위해 파일을 번들로 처리하고 데이터 URI를 사용하여 네트워크 요청을 줄입니다.
📦 웹팩은 NPM 패키지와 통합하여 프런트엔드 빌드를 위한 많은 오픈 소스 코드를 활용할 수 있습니다.
🖼️ 웹팩은 스타일 로더와 URL 로더를 사용하여 CSS 파일과 이미지 파일을 처리하여 성능을 향상시킵니다.
📝 CSS를 동적으로 주입하여 초기 스타일 플래시 문제를 해결하고 파일 크기를 줄이기 위해 웹팩을 프로덕션 모드로 실행합니다.

번들러 (bundler) -->  여러개의 파일을 하나로 병합한다 

모듈 (module)  --> 웹 애플리케이션을 제작하려면 HTML, CSS, Javascript, Images, Font 등 많은 파일들이 필요하죠. 이 파일 하나하나가 모두 모듈입니다.

webpack --> module bundler

2. 웹팩의 등장 배경
2-1. 강의 내용 --> https://joshua1988.github.io/webpack-guide/motivation/why-webpack.html#%ED%8C%8C%EC%9D%BC-%EB%8B%A8%EC%9C%84%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%93%88-%EA%B4%80%EB%A6%AC

2-2. 
HTML, CSS, JS 압축
이미지 압축
CSS 전처리기 변환

2-3.웹 애플리케이션의 빠른 로딩 속도와 높은 성능
일반적으로 특정 웹 사이트를 접근할 때 5초 이내로 웹 사이트가 표시되지 않으면 대부분의 사용자들은 해당 사이트를 벗어나거나 집중력을 잃게 됩니다.
그래서 웹 사이트의 로딩 속도를 높이기 위해 많은 노력들이 있었습니다. 
그 중 대표적인 노력이 브라우저에서 서버로 요청하는 파일 숫자를 줄이는 것입니다. 이를 위해 앞에서 살펴본 웹 태스크 매니저를 이용해
 파일들을 압축하고 병합하는 작업들을 진행했습니다.
뿐만 아니라 초기 페이지 로딩 속도를 높이기 위해 나중에 필요한 자원들은 나중에 요청하는 레이지 로딩(Lazy Loading)이 등장했죠.
웹팩은 기본적으로 필요한 자원은 미리 로딩하는게 아니라 그 때 그 때 요청하자는 철학을 갖고 있습니다.

3. 웹팩으로 해결하려는 문제

-자바스크립트 변수 유효 범위
웹팩은 변수 유효 범위의 문제점을 ES6의 Modules 문법과 웹팩의 모듈 번들링으로 해결합니다.

-브라우저별 HTTP 요청 숫자의 제약
TCP 스펙에 따라 브라우저에서 한 번에 서버로 보낼 수 있는 HTTP 요청 숫자는 제약되어 있습니다. 
HTTP 요청 숫자를 줄이는 것이 웹 애플리케이션의 성능을 높여줄 뿐만 아니라 사용자가 사이트를 조작하는 시간을 앞당겨 줄 수 있죠.
웹팩은 여러 개의 파일을 하나로 합침으로 위와 같은 브라우저별 HTTP 요청 숫자 제약을 피할 수 있습니다.

-사용하지 않는 코드의 관리
-Dynamic Loading & Lazy Loading 미지원
Require.js와 같은 라이브러리를 쓰지 않으면 동적으로 원하는 순간에 모듈을 로딩하는 것이 불가능 했습니다. 
그러나 이젠 웹팩의 Code Splitting(코드 분할하기) 기능을 이용하여 원하는 모듈을 원하는 타이밍에 로딩할 수 있습니다.

4. 바벨(babel)
Javascript 컴파일러
Babel -> ES6 (최신 JavaScript) 코드와 ES5 (이전 JavaScript) 를 일치화

ES6: const greeting = (name) => `Hello, ${name}!`;
ES5: var greeting = function greeting(name) {
  return 'Hello, ' + name + '!';
};


5. 웹팩의 4가지 주요 속성
 빌드 == 번들링 == 변환

-- entry
웹 자원을 변환하기 위해 필요한 최초 진입점이자 자바스크립트 파일 경로

-- output
속성은 웹팩을 돌리고 난 결과물의 파일 경로를 의미합니다.
화면이 바뀔 때 마다 자동으로 [chunkhash] << 여기가 변환됨
module.exports = {
  output: {
    filename: '[chunkhash].bundle.js'
  }
};


-- loader(module속성)
로더(Loader)는 웹팩이 웹 애플리케이션을 해석할 때 자바스크립트 파일이 아닌
 웹 자원(HTML, CSS, Images, 폰트 등)들을 변환할 수 있도록 도와주는 속성

 css 등을 webpack에 반영해줌

 ['style-loader', 'css-loader']
 style-loader -- style을 읽어서 html에 적용
 css-loader -- css파일을 읽음
 순서도 중요!

 https://webpack.js.org/loaders/ 여기에서 많은 loder를 사용 가능


-- plugin
플러그인(plugin)은 웹팩의 기본적인 동작에 추가적인 기능을 제공하는 속성입니다.
로더랑 비교하면 로더는 파일을 해석하고 변환하는 과정에 관여하는 반면,
 플러그인은 해당 결과물의 형태를 바꾸는 역할을 한다고 보면 됩니다.



-- webpack.config.js
	 빌드 한 결과물과 빌드 되기전의 결과물을 연결해줌
	 devtool: 'source-map'


Entry 속성은 웹팩을 실행할 대상 파일. 진입점
Output 속성은 웹팩의 결과물에 대한 정보를 입력하는 속성. 일반적으로 filename과 path를 정의
Loader 속성은 CSS, 이미지와 같은 비 자바스크립트 파일을 웹팩이 인식할 수 있게 추가하는 속성. 로더는 오른쪽에서 왼쪽 순으로 적용
Plugin 속성은 웹팩으로 변환한 파일에 추가적인 기능을 더하고 싶을 때 사용하는 속성. 웹팩 변환 과정 전반에 대한 제어권을 갖고 있음



-- Webpack Dev Server

웹팩 dev server는 결과물을 파일로 남기는 것이 아니라 메모리상에 결과물을 남김
